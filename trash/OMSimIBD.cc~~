#include "OMSimIBD.hh"
#include "OMSimSNAnalysis.hh"
#include "OMSimCommandArgsTable.hh"

#include "G4Event.hh"
#include "G4GeneralParticleSource.hh"
#include "G4ParticleTypes.hh"

#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4PhysicalConstants.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"
#include "OMSimSNTools.hh"
#include "OMSimInputData.hh"

/**
 * @brief Constructor of OMSimIBD class
 * @param gun Pointer to the particle gun object used for simulation.
 */
OMSimIBD::OMSimIBD(G4ParticleGun *gun)
    : ParticleGun(gun)
{
  // building energy distribution of electronic antineutrinos...
  //
  if ((OMSimCommandArgsTable::getInstance().get<bool>("SNfixEnergy")) == false)
  {
    std::pair<std::string, std::string> lFluxNames = mSNToolBox.getFileNames(OMSimCommandArgsTable::getInstance().get<G4int>("SNtype"));
    std::string lnubarFluxName = lFluxNames.second;
    // load model data
    std::vector<std::vector<double>> lData = InputDataManager::loadtxt(lnubarFluxName, true, 0, '\t');
    // for luminosity, only the curve is needed and not the units.
    // the total flux must be accounted for by the user and the events properly weigh
    mNuBar_luminosity = lData[1]; // second column is luminosity
    // for the rest, we need to specify the units. Make sure if you use a new models that the units are the same
    mNuBar_time.resize(lData[0].size());
    mNuBar_luminosity.resize(lData[1].size());
    mNuBar_meanenergy.resize(lData[2].size());
    mNuBar_meanenergysquare.resize(lData[3].size());

    for (unsigned int u = 0; u < lData[0].size(); u++)
    {
      mNuBar_time[u] = lData[0].at(u) * s;                     // first column corresponds to time
      mNuBar_meanenergy[u] = lData[2].at(u) * MeV;             // 3rd column corresponds to meanE
      mNuBar_meanenergysquare[u] = lData[3].at(u) * MeV * MeV; // 4th column corresponds to squaredmeanE
    }

    // Since the luminosity spectrum is not gonna change, it is worthy to compute already the slopes and store them
    nPoints_lum = mNuBar_time.size();
    getSlopes(mNuBar_time, mNuBar_luminosity, nPoints_lum, x_lum, f_lum, a_lum, Fc_lum);
  }
  else
  {
    mFixedenergy = OMSimCommandArgsTable::getInstance().get<G4double>("SNmeanE") * MeV;
    mAlpha = OMSimCommandArgsTable::getInstance().get<G4double>("SNalpha");
    mFixedenergy2 = mFixedenergy * mFixedenergy * (2 + mAlpha) / (1 + mAlpha); // Only for crosscheck
    std::vector<G4double> x1;
    std::vector<G4double> f1;
    fixE_nPoints = 500;
    energyDistributionVector(mFixedenergy, mAlpha, fixE_nPoints, x1, f1);
    getSlopes(x1, f1, fixE_nPoints, fixFe_X, fixFe_Y, fixFe_a, fixFe_Fc);
  }

  mNrTargets = numberOfTargets(2); // 2 protons (hydrogen) per molecule
}

/**
 * @brief Generates primary events for the simulation.
 *
 * This function sets the initial properties of the electronic antineutrinos such as position,
 * and energy for the primary event based on given input parameters or data files. The energy is determined from a tabulated
 * distribution or from a fixed mean energy, and the antineutrino's incoming direction is assumed to be (0,0,-1). The function also
 * computes the angle distribution and the positron's energy derived from the antineutrino energy and its direction. Finally,
 * the function computes the total cross-section and sets weights accordingly, passing the information to the analysis manager.
 *
 * @param anEvent Pointer to the G4Event object where primaries will be generated.
 * @todo Consider breaking down this function into smaller, more specialized sub-functions for clarity and modularity.
 * @todo Ensure that any new parameters or member variables used are appropriately documented.
 * @todo merge IBD and ENES into sharing a base class, to avoid repeating code
 */
void OMSimIBD::GeneratePrimaries(G4Event *anEvent)
{

  // Particle and position
  G4ParticleDefinition *lParticle = G4ParticleTable::GetParticleTable()->FindParticle("e+");
  ParticleGun->SetParticleDefinition(lParticle);
  
  G4ThreeVector lParticlePosition = mSNToolBox.randomPosition();
  ParticleGun->SetParticlePosition(lParticlePosition);

  G4double lThresholdEnergy, lTimeOfSpectrum, lMeanEnergy, lMeanEnergySquared, lAlpha, lNuBarEnergy;

  bool lRetry = true;
  while (lRetry)
  {
    lRetry = false; // Assume that we won't need to retry until proven otherwise.
    // set energy from a tabulated distribution
    lTimeOfSpectrum = -99.;
    lMeanEnergy = -99.;
    lMeanEnergySquared = -99.;
    lAlpha = -99.;
    lNuBarEnergy = -99.;
    if ((OMSimCommandArgsTable::getInstance().get<bool>("SNfixEnergy")) == false)
    {
      lTimeOfSpectrum = mSNToolBox.inverseCDFmethod(x_lum, f_lum, a_lum, Fc_lum, nPoints_lum);
      G4int timepos = mSNToolBox.findTime(lTimeOfSpectrum, mNuBar_time);
      lMeanEnergy = mSNToolBox.linearInterpolation(lTimeOfSpectrum, mNuBar_time.at(timepos - 1), mNuBar_time.at(timepos), mNuBar_meanenergy.at(timepos - 1), mNuBar_meanenergy.at(timepos));
      lMeanEnergySquared = mSNToolBox.linearInterpolation(lTimeOfSpectrum, mNuBar_time.at(timepos - 1), mNuBar_time.at(timepos), mNuBar_meanenergysquare.at(timepos - 1), mNuBar_meanenergysquare.at(timepos));

      lThresholdEnergy = neutron_mass_c2 + electron_mass_c2 - proton_mass_c2 + 0.1 * MeV; //+0.1MeV because angularcrosssection fails if the energy is too close to the threshold.
      lNuBarEnergy = 0;

      G4int count = 0;
      while (lNuBarEnergy <= lThresholdEnergy)
      {
        lNuBarEnergy = mSNToolBox.sampleEnergy(lMeanEnergy, lMeanEnergySquared, lAlpha);
        count += 1;
        if (count > 10)
        {
          lRetry = true;
          break;
          // To avoid entering in an almost infinite bucle if energy of the chosen time is very unlikely to be higher than
          // the threshold, go to the beggining and choose a different time of the burst
        }
      }
    }
    else
    {
      lTimeOfSpectrum = 0.0;
      lMeanEnergy = mFixedenergy;
      lMeanEnergySquared = mFixedenergy2;
      lNuBarEnergy = mSNToolBox.inverseCDFmethod(fixFe_X, fixFe_Y, fixFe_a, fixFe_Fc, fixE_nPoints);
      while (lNuBarEnergy <= lThresholdEnergy)
      {
        // note that, if fixE is very low, we might get stuck here a while for each particle
        lNuBarEnergy = mSNToolBox.inverseCDFmethod(fixFe_X, fixFe_Y, fixFe_a, fixFe_Fc, fixE_nPoints);
      }
    }
  }

  // angle distribution. We suppose the incident antineutrino would come with momentum direction (0,0,-1)
  AngularDistribution(lNuBarEnergy);

  G4double costheta = mSNToolBox.sampleValueFromDistribution(angdist_x, angdist_y, angdist_nPoints);
  G4double sintheta = std::sqrt(1. - costheta * costheta);
  G4double phi = twopi * G4UniformRand();

  G4double zdir = -costheta;
  G4double xdir = -sintheta * std::cos(phi);
  G4double ydir = -sintheta * std::sin(phi);

  // from lNuBarEnergy and costheta, we get e+ energy
  G4double p_energy = PositronEnergy(lNuBarEnergy, costheta);

  ParticleGun->SetParticleEnergy(p_energy);
  ParticleGun->SetParticleMomentumDirection(G4ThreeVector(xdir, ydir, zdir));

  G4double sigma = totalCrossSection(lNuBarEnergy);
  G4double Weigh = mSNToolBox.weight(sigma, mNrTargets);

  // sending stuff to analysismanager
  OMSimSNAnalysis &lAnalysisManager = OMSimSNAnalysis::getInstance();
  lAnalysisManager.nuTime = lTimeOfSpectrum;
  lAnalysisManager.nuMeanEnergy = lMeanEnergy;
  lAnalysisManager.nuEnergy = lNuBarEnergy;
  lAnalysisManager.cosTheta = costheta;
  lAnalysisManager.primaryEnergy = p_energy;
  lAnalysisManager.weigh = Weigh;

  // create vertex
  //
  ParticleGun->GeneratePrimaryVertex(anEvent);
}

/**
 * @brief Computes the angular distribution of the reaction \( \bar{\nu}_e + p \rightarrow e^+ + n \).
 *
 * This function evaluates the angular distribution of the positron based on the energy of the incident electronic antineutrino.
 * The calculation follows the theoretical approach outlined in "The angular distribution of the reaction \( \bar{\nu}_e + p \rightarrow e^+ + n \)"
 * by P. Vogel and J. F. Beacom (1999), specifically referencing Eq. 14.
 *
 * @param Enubar Energy of the incoming electronic antineutrino.
 * @note This function populates the angdist_x and angdist_y vectors, which later can be used in other parts of the simulation.
 */
void OMSimIBD::AngularDistribution(G4double Enubar)
{
  // Angular distribution
  //
  // P. Vogel, J. F. Beacom. (1999). The angular distribution of the reaction nubar_e + p -> e+ + n. Phys.Rev., D60, 053003
  // Eq. 14
  //
  angdist_nPoints = 300; // probably more than enough

  G4double costhetac = 0.974;
  G4double consf = 1.;
  G4double consf2 = 3.706;
  mYval2 = (pow(mDeltaMass, 2) - pow(electron_mass_c2, 2)) / 2.;
  G4double M = proton_mass_c2;
  G4double sigma0 = pow(mGf, 2) * pow(costhetac, 2) / pi * 1.024 * pow(197.326e-15, 2);

  angdist_x.resize(angdist_nPoints);
  angdist_y.resize(angdist_nPoints);

  G4double min = -1.;
  G4double max = 1.;
  G4double delta = (max - min) / G4double(angdist_nPoints - 1);
  for (G4int i = 0; i < angdist_nPoints; i++)
  {
    angdist_x[i] = min + i * delta; // costheta
  }

  G4double Ee0 = Enubar - mDeltaMass;
  G4double pe0 = pow((pow(Ee0, 2) - pow(electron_mass_c2, 2)), 1. / 2.);
  G4double ve0 = pe0 / Ee0;

  for (G4int j = 0; j < angdist_nPoints; j++)
  {
    G4double Ee1 = Ee0 * (1. - Enubar / M * (1. - ve0 * angdist_x[j])) - mYval2 / M;
    G4double pe1 = pow((pow(Ee1, 2) - pow(electron_mass_c2, 2)), 1. / 2.);
    G4double ve1 = pe1 / Ee1;
    G4double part1 = 2. * (consf + consf2) * mConsg * ((2. * Ee0 + mDeltaMass) * (1. - ve0 * angdist_x[j]) - pow(electron_mass_c2, 2) / Ee0);
    G4double part2 = (pow(consf, 2) + pow(mConsg, 2)) * (mDeltaMass * (1. + ve0 * angdist_x[j]) + pow(electron_mass_c2, 2) / Ee0);
    G4double part3 = (pow(consf, 2) + 3. * pow(mConsg, 2)) * ((Ee0 + mDeltaMass) * (1. - angdist_x[j] / ve0) - mDeltaMass);
    G4double part4 = (pow(consf, 2) + pow(mConsg, 2)) * ((Ee0 + mDeltaMass) * (1. - angdist_x[j] / ve0) - mDeltaMass) * ve0 * angdist_x[j];
    G4double Tau = part1 + part2 + part3 + part4;

    angdist_y[j] = sigma0 / 2. * ((pow(consf, 2) + 3. * pow(mConsg, 2)) + (pow(consf, 2) - pow(mConsg, 2)) * ve1 * angdist_x[j]) * Ee1 * pe1 - sigma0 / 2. * (Tau / M) * Ee0 * pe0; // dsigma/dcos(theta)
  }
}

/**
 * @brief Computes the energy of a positron resulting from the inverse beta decay.
 *
 * Given the energy of the incident electronic antineutrino and the scatter angle, this function calculates the
 * energy of the emitted positron following inverse beta decay. The theoretical basis for this calculation is
 * given in "The angular distribution of the reaction \( \nu_e + p \rightarrow e^+ + n \)" by P. Vogel and J. F. Beacom (1999), specifically referencing Eq. 13.
 *
 * @param pEnubar Energy of the incoming electronic antineutrino.
 * @param pCostheta Cosine of the scatter angle between the direction of the antineutrino's momentum and the positron's momentum.
 *
 * @return Energy of the emitted positron as a result of the inverse beta decay process.
 * @reference P. Vogel, J. F. Beacom. (1999). The angular distribution of the reaction \( \nu_e + p \rightarrow e^+ + n \). Phys.Rev., D60, 053003
 */
G4double OMSimIBD::PositronEnergy(G4double pEnubar, G4double pCostheta)
{
  // Get positron energy from inverse beta decay as a function of incident antineutrino energy and scatter angle
  //
  // P. Vogel, J. F. Beacom. (1999). The angular distribution of the reaction nu_e + p -> e+ + n. Phys.Rev., D60, 053003
  // Eq. 13
  //
    G4double lEe0 = pEnubar - mDeltaMass;
    G4double lPe0 = pow((pow(lEe0, 2) - pow(electron_mass_c2, 2)), 1. / 2.);
    G4double lVe0 = lPe0 / lEe0;
    G4double lEnergy = lEe0 * (1. - pEnubar / proton_mass_c2 * (1. - lVe0 * pCostheta)) - mYval2 / proton_mass_c2;
    
    return lEnergy;
}

/**
 * @brief Calculates the total cross-section of the inverse beta decay reaction for a given energy.
 *
 * This function estimates the total cross-section of the inverse beta decay, which can be used
 * to weigh each event. The theoretical basis for this calculation is presented in "Future detection
 * of supernova neutrino burst and explosion mechanism"
 * by T. Totani, K. Sato, H. E. Dalhed, and J. R. Wilson (1998), specifically referencing Equation 9.
 *
 * @param pEnergy Energy of the incoming electronic antineutrino.
 *
 * @return Total cross-section for the given energy.
 * @reference T. Totani, K. Sato, H. E. Dalhed, J. R. Wilson, "Future detection of supernova neutrino burst
 * and explosion mechanism", Astrophys. J. 496, 1998, 216–225, Preprint astro-ph/9710203, 1998.
 */
G4double OMSimIBD::totalCrossSection(G4double pEnergy)
{
  G4double lHbar = 6.58211899e-16 * 1e-6 * MeV * s;
  G4double lC = 3e8 * m / s;
  G4double lSigma0 = pow(2. * mGf * electron_mass_c2 * lHbar * lC, 2) / pi;
  G4double lConstante = -0.00325 / (MeV * MeV);
  G4double lDeltaWM = lConstante * (pEnergy - (neutron_mass_c2 - proton_mass_c2) / 2.);
  G4double lEe = pEnergy + proton_mass_c2 - neutron_mass_c2;
  G4double lPec = pow((pow(lEe, 2) - pow(electron_mass_c2, 2)), 1. / 2.);
  G4double lSigma = 1. / 4. * lSigma0 * (1. + 3. * pow(mConsg, 2)) * (1. + lDeltaWM) * lEe * lPec / pow(electron_mass_c2, 2);
  return lSigma;
}
